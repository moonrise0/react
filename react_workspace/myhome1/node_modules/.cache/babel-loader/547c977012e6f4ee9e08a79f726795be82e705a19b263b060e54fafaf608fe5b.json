{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\react_workspace\\\\myhome1\\\\src\\\\component\\\\HeroWrite.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HeroWrite(prop) {\n  _s();\n  const [hero_name, setHeroName] = useState(\"\");\n  //useState함수가 문자열변수랑 변수값 바꾸는 함수를 만들어서 배열형태로 전달한다.\n\n  const [hero_desc, setHeroDesc] = useState(\"\");\n\n  //input태그에 값이 바뀌면 이함수가 호출된다.\n  const heroNameChange = e => {\n    setHeroName(e.target.value);\n  };\n\n  //input 태그에 값이 바뀌면ㅇ ㅣ함수가 호출된다.\n  const heroDescChange = e => {\n    setHeroDesc(e.target.value);\n  };\n\n  //form태그를 써서 서버로 전송할때 <button>태그에 type=\"button\"속성이 없으면\\\n  //버튼을 누를때 submit함수가 호출된다.\n  //submit함수가 호출되면 form태그에 onSubmit이벤트 핸들러가 호출된다. 이때\n  //잡아채서 서보에 전송하는 처리를 한다. onsubmit함수의 경우 무조건 서버로 전송을 한다.\n  //이를 막기 위해서 preventDefault()함수를 호출한다.\n\n  const onSubmit = e => {\n    e.preventDefault();\n    //form 태그를 통해 서버에 정보를 전송전에 호출된다.\n    //버튼의 기본 기능을 정지시킨다. submit버튼의 submit기능을\n    //막고 별도의 처리를 한다.\n    //spring은 데이터를 문자열로 와야 받는다.\n    //axios 는 json으로 데이터를 주고받는다.\n    axios.post(\"http://localhost:9090/hero/write\", {\n      hero_name: hero_name,\n      hero_desc: hero_desc\n    }).then(res => {\n      console.log(res.data.result);\n      window.location.reload(); //화면 다시불러오기.\n      //location 객체는 원래 존재하는데 부모가 윈도우.\n      //react가 아니면 location.reload()만 호출해도되는데\n      //react는 window.location.reload()로 호출해라.\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uC601\\uC6C5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), \"\\uC774\\uB984: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: heroNameChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), \"\\uC5C5\\uC801: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: heroNameChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"\\uCD94\\uAC00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(HeroWrite, \"7HLMU4/+2b1bDej3fgeGIJ/5/Ic=\");\n_c = HeroWrite;\nexport default HeroWrite;\nvar _c;\n$RefreshReg$(_c, \"HeroWrite\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","HeroWrite","prop","_s","hero_name","setHeroName","hero_desc","setHeroDesc","heroNameChange","e","target","value","heroDescChange","onSubmit","preventDefault","post","then","res","console","log","data","result","window","location","reload","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","_c","$RefreshReg$"],"sources":["C:/React/react_workspace/myhome1/src/component/HeroWrite.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction HeroWrite(prop) {\r\n  const [hero_name, setHeroName] = useState(\"\");\r\n  //useState함수가 문자열변수랑 변수값 바꾸는 함수를 만들어서 배열형태로 전달한다.\r\n  \r\n  const [hero_desc, setHeroDesc] = useState(\"\");\r\n\r\n  //input태그에 값이 바뀌면 이함수가 호출된다.\r\n  const heroNameChange = (e) => {\r\n    setHeroName(e.target.value);\r\n  };\r\n\r\n\r\n  //input 태그에 값이 바뀌면ㅇ ㅣ함수가 호출된다.\r\n  const heroDescChange = (e) => {\r\n    setHeroDesc(e.target.value);\r\n  };\r\n\r\n\r\n//form태그를 써서 서버로 전송할때 <button>태그에 type=\"button\"속성이 없으면\\\r\n//버튼을 누를때 submit함수가 호출된다.\r\n//submit함수가 호출되면 form태그에 onSubmit이벤트 핸들러가 호출된다. 이때\r\n//잡아채서 서보에 전송하는 처리를 한다. onsubmit함수의 경우 무조건 서버로 전송을 한다.\r\n//이를 막기 위해서 preventDefault()함수를 호출한다.\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    //form 태그를 통해 서버에 정보를 전송전에 호출된다.\r\n    //버튼의 기본 기능을 정지시킨다. submit버튼의 submit기능을\r\n    //막고 별도의 처리를 한다.\r\n    //spring은 데이터를 문자열로 와야 받는다.\r\n    //axios 는 json으로 데이터를 주고받는다.\r\n    axios\r\n      .post(\"http://localhost:9090/hero/write\", {\r\n        hero_name: hero_name,\r\n        hero_desc: hero_desc,\r\n      })\r\n      .then((res) => {\r\n        console.log(res.data.result);\r\n        window.location.reload(); //화면 다시불러오기.\r\n        //location 객체는 원래 존재하는데 부모가 윈도우.\r\n        //react가 아니면 location.reload()만 호출해도되는데\r\n        //react는 window.location.reload()로 호출해라.\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmit}>\r\n        <h3>영웅</h3>\r\n        이름: <input type=\"text\" onChange={heroNameChange}></input>\r\n        <br />\r\n\r\n        업적: <input type=\"text\" onChange={heroNameChange}></input>\r\n        <br />\r\n        <button>추가</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HeroWrite;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,SAASA,CAACC,IAAI,EAAE;EAAAC,EAAA;EACvB,MAAM,CAACC,SAAS,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC7C;;EAEA,MAAM,CAACS,SAAS,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAE7C;EACA,MAAMW,cAAc,GAAIC,CAAC,IAAK;IAC5BJ,WAAW,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC7B,CAAC;;EAGD;EACA,MAAMC,cAAc,GAAIH,CAAC,IAAK;IAC5BF,WAAW,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC7B,CAAC;;EAGH;EACA;EACA;EACA;EACA;;EAEE,MAAME,QAAQ,GAAIJ,CAAC,IAAK;IACtBA,CAAC,CAACK,cAAc,EAAE;IAClB;IACA;IACA;IACA;IACA;IACAhB,KAAK,CACFiB,IAAI,CAAC,kCAAkC,EAAE;MACxCX,SAAS,EAAEA,SAAS;MACpBE,SAAS,EAAEA;IACb,CAAC,CAAC,CACDU,IAAI,CAAEC,GAAG,IAAK;MACbC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,IAAI,CAACC,MAAM,CAAC;MAC5BC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE,CAAC,CAAC;MAC1B;MACA;MACA;IACF,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBR,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC;IACpB,CAAC,CAAC;EACN,CAAC;EACD,oBACE1B,OAAA;IAAA2B,QAAA,eACE3B,OAAA;MAAMa,QAAQ,EAAEA,QAAS;MAAAc,QAAA,gBACvB3B,OAAA;QAAA2B,QAAA,EAAI;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,kBACP,eAAA/B,OAAA;QAAOgC,IAAI,EAAC,MAAM;QAACC,QAAQ,EAAEzB;MAAe;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eACzD/B,OAAA;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,kBAEF,eAAA/B,OAAA;QAAOgC,IAAI,EAAC,MAAM;QAACC,QAAQ,EAAEzB;MAAe;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eACzD/B,OAAA;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACN/B,OAAA;QAAA2B,QAAA,EAAQ;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACd;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACH;AAEV;AAAC5B,EAAA,CA5DQF,SAAS;AAAAiC,EAAA,GAATjC,SAAS;AA8DlB,eAAeA,SAAS;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}