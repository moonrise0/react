{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\react_workspace\\\\myhome1\\\\src\\\\component\\\\Fortest1.js\",\n  _s = $RefreshSig$();\n/* Fortest1.js*/\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Fortest1(props) {\n  _s();\n  const [fruitList] = useState([\"사과\", \"배\", \"포도\", \"수박\", \"머루\"]);\n  const [fruit, setFruit] = useState(\"\");\n\n  //input 태그에서 값 입력하면  fruit 변수에 값을 저장한다.\n  const onChange = e => {\n    setFruit(e.target.value);\n  };\n  const goAppend = () => {\n    //배열에  push함수 사용못함, 원래 배열에 데이터 추가.\n    //배열 자체를 새로 만들어 바꿔치기를 해야한다.\n    //push - 원래 배열 메모리에 추가\n    //concat - 새로운 배열을 만들어서 기존 배열 내용복사하고 하나에 추가\n    setFruitList(fruitList.concat(fruit));\n    setFruit(\"\"); //input태그 공백채우기\n  };\n\n  const goSelect = index => {\n    alert(fruitList[index]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: onChange,\n      value: fruit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: fruitList.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"#none\",\n            onClick: () => {\n              goSelect(index);\n            },\n            children: item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(Fortest1, \"uh0Ii+rc1043oIt1IvwoVajPxpc=\");\n_c = Fortest1;\nexport default Fortest1;\nvar _c;\n$RefreshReg$(_c, \"Fortest1\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fortest1","props","_s","fruitList","fruit","setFruit","onChange","e","target","value","goAppend","setFruitList","concat","goSelect","index","alert","children","type","fileName","_jsxFileName","lineNumber","columnNumber","map","item","href","onClick","_c","$RefreshReg$"],"sources":["C:/React/react_workspace/myhome1/src/component/Fortest1.js"],"sourcesContent":["/* Fortest1.js*/\r\nimport React, { useState } from \"react\";\r\n\r\nfunction Fortest1(props) {\r\n  const [fruitList] = useState([\"사과\", \"배\", \"포도\", \"수박\", \"머루\"]);\r\n  const [fruit, setFruit] = useState(\"\");\r\n\r\n  //input 태그에서 값 입력하면  fruit 변수에 값을 저장한다.\r\n  const onChange = (e) => {\r\n    setFruit(e.target.value);\r\n  };\r\n\r\n  const goAppend = () => {\r\n    //배열에  push함수 사용못함, 원래 배열에 데이터 추가.\r\n    //배열 자체를 새로 만들어 바꿔치기를 해야한다.\r\n    //push - 원래 배열 메모리에 추가\r\n    //concat - 새로운 배열을 만들어서 기존 배열 내용복사하고 하나에 추가\r\n    setFruitList(fruitList.concat(fruit));\r\n    setFruit(\"\"); //input태그 공백채우기\r\n  };\r\n\r\n  const goSelect = (index) => {\r\n    alert(fruitList[index]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input type=\"text\" onChange={onChange} value={fruit} />\r\n\r\n      <ul>\r\n        {fruitList.map((item, index) => {\r\n          return (\r\n            <li key={index}>\r\n              <a\r\n                href=\"#none\"\r\n                onClick={() => {\r\n                  goSelect(index);\r\n                }}\r\n              >\r\n                {item}\r\n              </a>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Fortest1;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACvB,MAAM,CAACC,SAAS,CAAC,GAAGN,QAAQ,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;EAC3D,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAMS,QAAQ,GAAIC,CAAC,IAAK;IACtBF,QAAQ,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC1B,CAAC;EAED,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACrB;IACA;IACA;IACA;IACAC,YAAY,CAACR,SAAS,CAACS,MAAM,CAACR,KAAK,CAAC,CAAC;IACrCC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChB,CAAC;;EAED,MAAMQ,QAAQ,GAAIC,KAAK,IAAK;IAC1BC,KAAK,CAACZ,SAAS,CAACW,KAAK,CAAC,CAAC;EACzB,CAAC;EAED,oBACEf,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAOkB,IAAI,EAAC,MAAM;MAACX,QAAQ,EAAEA,QAAS;MAACG,KAAK,EAAEL;IAAM;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAEvDtB,OAAA;MAAAiB,QAAA,EACGb,SAAS,CAACmB,GAAG,CAAC,CAACC,IAAI,EAAET,KAAK,KAAK;QAC9B,oBACEf,OAAA;UAAAiB,QAAA,eACEjB,OAAA;YACEyB,IAAI,EAAC,OAAO;YACZC,OAAO,EAAEA,CAAA,KAAM;cACbZ,QAAQ,CAACC,KAAK,CAAC;YACjB,CAAE;YAAAE,QAAA,EAEDO;UAAI;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QACH,GARGP,KAAK;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAST;MAET,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACD;AAEV;AAACnB,EAAA,CA5CQF,QAAQ;AAAA0B,EAAA,GAAR1B,QAAQ;AA8CjB,eAAeA,QAAQ;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}